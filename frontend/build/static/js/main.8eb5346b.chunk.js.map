{"version":3,"sources":["config/axiosconfig.js","components/TodoForm.js","components/Collapsible.js","components/Todo.js","components/Todolist.js","components/Deadline.js","components/ListComponent.js","components/SortComponent.js","App.js","index.js"],"names":["instance","axios","create","baseURL","TodoForm","props","priorityValues","inputChange","e","onInputChange","checkPriorityValue","value","todoFormState","priority","toString","className","onChange","name","type","required","htmlFor","date","id","checked","list","description","onClick","preventDefault","onFormSubmit","submitButtonLabel","onFormCancel","Collapsible","globalCollapsibleStyle","main","display","flexFlow","header","width","content","iconStyle","height","transform","isOpen","transition","style","textAlign","marginRight","children","CustomButton","label","icon","Todo","todo","todoHandler","collapsibleStates","calculateRemainingDays","moment","diff","Date","isdone","find","collapse","stopPropagation","complete","edit","delete","created","TodoList","todos","todoItems","map","deadlines","deadlineItems","ListComponent","lists","isLoaded","statusMessage","useState","collapsedListStates","setCollapsedListStates","hideCompleted","setHideCompleted","useEffect","array","item","forEach","includes","push","getListId","listname","toLowerCase","handleCollapse","listId","tmp","clickedIndex","findIndex","setCollapsed","listItem","generateLists","filtered","filter","element","target","Deadline","SortButtonLabel","SortButton","SortButtonListComponent","sortAscending","setSortAscending","previouslyClicked","setPreviouslyClicked","tasklist","slice","updateTasklist","sort","a","b","localeCompare","handleClick","buttonLabel","todoFormButtonLabel","DEFAULT_LIST","MOBILE_WIDTH_THRESHOLD","App","handleInitialFetch","resource","success","get","concat","process","then","res","hasOwnProperty","Error","catch","err","handleFetchError","key","setState","cb","response","status","convertTodoContext","context","backendContext","date_deadline","is_done","listid","date_created","getListName","state","post","result","data","console","log","isLastTodoFromList","length","handleTodoFormInputChange","event","handleSubmit","window","innerWidth","isFormVisibleWhenScreenSmall","todoBackendContext","todoFormSubmitButtonLabel","indexOfEditedTodo","put","getListsResult","postResponse","addedTodoId","collapsibleContext","getTodoResponse","todoFrontendContext","resetTodoFormState","handleCancel","todoformstate","handleSort","sortedTodos","getTodoObject","todoId","el","temp","idx","x","todoToEdit","isLoaded_lists","isLoaded_todos","descritpion","collapsibleStateObject","this","SortComponent","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8eb5346b.chunk.js","sourcesContent":["import axios from 'axios';\r\n// Heroku url:\r\n// https://tamk-4a00ez62-3001-group11.herokuapp.com/api\r\nconst config = {\r\n  baseURL: 'https://tamk-4a00ez62-3001-group11.herokuapp.com/api',\r\n};\r\nconst instance = axios.create(config);\r\n\r\nexport default instance;\r\n","import React from 'react';\r\n\r\nfunction TodoForm(props) {\r\n  const priorityValues = {\r\n    LOW: '3',\r\n    MEDIUM: '2',\r\n    HIGH: '1',\r\n  };\r\n\r\n  const inputChange = (e) => {\r\n    props.onInputChange(e);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (props.todoFormState.name === '') return;\r\n    props.onFormSubmit(props.todoFormState);\r\n  };\r\n\r\n  const handleCancel = (e) => {\r\n    e.preventDefault();\r\n    props.onFormCancel();\r\n  };\r\n\r\n  const checkPriorityValue = (value) => {\r\n    return props.todoFormState.priority.toString() === value;\r\n  };\r\n\r\n  return (\r\n    <form>\r\n      <h3>Add Deadline</h3>\r\n      <div className='input-animation'>\r\n        <input\r\n          onChange={inputChange}\r\n          name='name'\r\n          value={props.todoFormState.name}\r\n          type='text'\r\n          required\r\n        />\r\n        <label htmlFor='name' className='label-name'>\r\n          <span className='content-name'>Name</span>\r\n        </label>\r\n      </div>\r\n      <div className='input-animation'>\r\n        <input\r\n          onChange={inputChange}\r\n          name='date'\r\n          type='date'\r\n          value={props.todoFormState.date}\r\n          required\r\n        />\r\n        <label htmlFor='date' className='label-name'>\r\n          <span className='content-name'>Date</span>\r\n        </label>\r\n      </div>\r\n\r\n      <div id='priority'>\r\n        <label>\r\n          Priority\r\n          <div className='radio-container'>\r\n            <input\r\n              type='radio'\r\n              id='low'\r\n              name='priority'\r\n              value={priorityValues.LOW}\r\n              checked={checkPriorityValue(priorityValues.LOW)}\r\n              onChange={inputChange}\r\n            />\r\n            <label htmlFor='low' className='radio'>\r\n              Low\r\n            </label>\r\n            <input\r\n              type='radio'\r\n              id='medium'\r\n              name='priority'\r\n              value={priorityValues.MEDIUM}\r\n              checked={checkPriorityValue(priorityValues.MEDIUM)}\r\n              onChange={inputChange}\r\n            />\r\n            <label htmlFor='medium' className='radio'>\r\n              Medium\r\n            </label>\r\n            <input\r\n              type='radio'\r\n              id='high'\r\n              name='priority'\r\n              value={priorityValues.HIGH}\r\n              checked={checkPriorityValue(priorityValues.HIGH)}\r\n              onChange={inputChange}\r\n            />\r\n            <label htmlFor='high' className='radio'>\r\n              High\r\n            </label>\r\n          </div>\r\n        </label>\r\n      </div>\r\n      <div className='input-animation'>\r\n        <input\r\n          onChange={inputChange}\r\n          name='list'\r\n          type='text'\r\n          value={props.todoFormState.list}\r\n          required\r\n        />\r\n        <label htmlFor='list' className='label-name'>\r\n          <span className='content-name'>Task List</span>\r\n        </label>\r\n      </div>\r\n      <div className='input-animation'>\r\n        <input\r\n          onChange={inputChange}\r\n          name='description'\r\n          type='text'\r\n          value={props.todoFormState.description}\r\n          required\r\n        />\r\n        <label htmlFor='description' className='label-name'>\r\n          <span className='content-name'>Description</span>\r\n        </label>\r\n      </div>\r\n      <div className='submitbuttons'>\r\n        <button\r\n          onClick={handleSubmit}\r\n          id='submit'\r\n          className='form-button'\r\n          type='submit'\r\n        >\r\n          {props.submitButtonLabel}\r\n        </button>\r\n        <button\r\n          onClick={handleCancel}\r\n          id='cancel'\r\n          className='form-button'\r\n          type='submit'\r\n        >\r\n          Cancel\r\n        </button>\r\n      </div>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default TodoForm;\r\n","import React from 'react';\r\n\r\n/*\r\n  Collapsible is a simple wrapper to allow showing/hiding of content.\r\n  Collapsible's header prop is the content which is always visible,\r\n  the 'header' or 'toggler' part of the component.\r\n  This 'header' element can be clicked to toggle the collapsible content.\r\n*/\r\nfunction Collapsible(props) {\r\n  // All these styles are very specific to this component,\r\n  // so they are here and not in the scss file.\r\n  // Anything (besides the icon in collapsible-header)\r\n  // under collapsible-header or collapsible-content should\r\n  // be styled in the scss file!\r\n\r\n  // Header & content are their own 'rows'.\r\n  const globalCollapsibleStyle = {\r\n    main: { display: 'flex', flexFlow: 'row wrap' },\r\n    header: { width: '100%' },\r\n    content: { width: '100%' },\r\n  };\r\n\r\n  const iconWrapperStyle = {\r\n    textAlign: 'center',\r\n    width: '16px',\r\n    height: '16px',\r\n    marginRight: '1rem',\r\n  };\r\n\r\n  const iconStyle = {\r\n    width: '100%',\r\n    height: '100%',\r\n    transform: props.isOpen ? 'rotate(90deg)' : '',\r\n    transition: 'all 0.1s ease-out',\r\n  };\r\n\r\n  const handleClick = () => {\r\n    props.onClick(props.id);\r\n  };\r\n\r\n  return (\r\n    <div className='collapsible' style={globalCollapsibleStyle.main}>\r\n      <div\r\n        className='collapsible-header'\r\n        onClick={handleClick}\r\n        style={globalCollapsibleStyle.header}\r\n      >\r\n        {\r\n          <div style={iconWrapperStyle}>\r\n            <i className='fas fa-angle-right' style={iconStyle}></i>\r\n          </div>\r\n        }\r\n        {props.header}\r\n      </div>\r\n      <div\r\n        className={\r\n          props.isOpen ? 'collapsible-content' : 'collapsible-content collapsed'\r\n        }\r\n        style={globalCollapsibleStyle.content}\r\n      >\r\n        {props.isOpen ? props.children : null}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Collapsible;\r\n","import React from 'react';\r\nimport moment from 'moment';\r\nimport Collapsible from './Collapsible';\r\n\r\nconst Todo = ({ todo, todoHandler, collapsibleStates }) => {\r\n  const removeItem = () => {\r\n    // Filtering happens now in App.js as TodoComponent now has only\r\n    // todos from certain list\r\n    todoHandler.delete(todo.id);\r\n  };\r\n\r\n  const markCompleted = (e) => {\r\n    // Prevents task from collapsing when clicking the checkmark button.\r\n    e.stopPropagation();\r\n    todoHandler.complete(todo.id);\r\n  };\r\n\r\n  const handleEdit = () => {\r\n    todoHandler.edit(todo);\r\n  };\r\n\r\n  const setClassNameDependingOnIsDoneStatus = () => {\r\n    return todo.isdone ? 'todo-item completed' : 'todo-item';\r\n  };\r\n\r\n  const setCollapsed = () => {\r\n    let collapsibleState = collapsibleStates.find(({ id }) => id === todo.id);\r\n    return collapsibleState.isOpen;\r\n  };\r\n\r\n  const calculateRemainingDays = () => {\r\n    const diffInDays = moment(todo.date).diff(moment(new Date()), 'days');\r\n    return diffInDays;\r\n  };\r\n\r\n  const checkTimeUntilDeadline = () => {\r\n    if (!todo.isdone) {\r\n      if (todo.date) {\r\n        if (calculateRemainingDays() >= 0) {\r\n          return `Time remaining: ${calculateRemainingDays()} days`;\r\n        } else {\r\n          return `You are ${-calculateRemainingDays()} days late!`;\r\n        }\r\n      } else {\r\n        return 'You are in no hurry';\r\n      }\r\n    } else {\r\n      return 'Task completed';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <li className={setClassNameDependingOnIsDoneStatus()}>\r\n      <Collapsible\r\n        id={todo.id}\r\n        isOpen={setCollapsed()}\r\n        onClick={todoHandler.collapse}\r\n        header={\r\n          <>\r\n            <p className='todo-priority'>{todo.priority}</p>\r\n            <p className='todo-date'>{todo.date}</p>\r\n            <p className='todo-name'>{todo.name}</p>\r\n            <CustomButton\r\n              className='btn-flat task-completed'\r\n              onClick={markCompleted}\r\n              icon='fas fa-check'\r\n            />\r\n          </>\r\n        }\r\n      >\r\n        <div className='toolbar'>\r\n          <p>{checkTimeUntilDeadline()}</p>\r\n          <CustomButton\r\n            id='edit'\r\n            className='btn py-05'\r\n            onClick={handleEdit}\r\n            label='Edit'\r\n            icon='fas fa-edit'\r\n          />\r\n          <CustomButton\r\n            id='delete'\r\n            className='btn py-05'\r\n            onClick={removeItem}\r\n            label='Delete'\r\n            icon='fas fa-trash'\r\n          />\r\n        </div>\r\n        {todo.description === '' ? null : (\r\n          <div>\r\n            <p>Description:</p>\r\n            <p className='todo-description'>{todo.description}</p>\r\n          </div>\r\n        )}\r\n        <div>\r\n          <p className='todo-datecreated'>Date added: {todo.created}</p>\r\n        </div>\r\n      </Collapsible>\r\n    </li>\r\n  );\r\n};\r\n\r\n// Change later to a more permanent solution\r\nfunction CustomButton(props) {\r\n  return (\r\n    <button id={props.id} className={props.className} onClick={props.onClick}>\r\n      {props.label}\r\n      <i className={props.icon}></i>\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default Todo;\r\n","import React from 'react';\r\n// Import components\r\nimport Todo from './Todo';\r\n\r\nconst TodoList = ({ todos, todoHandler, collapsibleStates }) => {\r\n  const todoItems = todos.map((todo) => {\r\n    return (\r\n      <Todo\r\n        key={todo.id}\r\n        todo={todo}\r\n        todoHandler={todoHandler}\r\n        collapsibleStates={collapsibleStates}\r\n      />\r\n    );\r\n  });\r\n  return <div className='list'>{todoItems}</div>;\r\n};\r\n\r\nexport default TodoList;\r\n","import React from 'react';\r\n// Import components\r\nimport Todo from './Todo';\r\n\r\nconst TodoList = ({ deadlines, todoHandler, collapsibleStates }) => {\r\n  const deadlineItems = deadlines.map((todo) => {\r\n    return (\r\n      <Todo\r\n        key={todo.id}\r\n        todo={todo}\r\n        todoHandler={todoHandler}\r\n        collapsibleStates={collapsibleStates}\r\n      />\r\n    );\r\n  });\r\n  return <div>{deadlineItems}</div>;\r\n};\r\n\r\nexport default TodoList;\r\n","import React, { useState, useEffect } from 'react';\r\n// Import components\r\nimport TodoList from './Todolist';\r\nimport Collapsible from './Collapsible';\r\nimport Deadline from './Deadline';\r\n\r\nconst ListComponent = ({\r\n  todos,\r\n  lists,\r\n  todoHandler,\r\n  collapsibleStates,\r\n  isLoaded,\r\n  statusMessage,\r\n}) => {\r\n  const [collapsedListStates, setCollapsedListStates] = useState([]);\r\n  const [hideCompleted, setHideCompleted] = useState(false);\r\n\r\n  // Populate collapsedListStates with relevant objects.\r\n  useEffect(() => {\r\n    let array = [];\r\n    array = lists.map((item) => {\r\n      item = {\r\n        id: item.id,\r\n        isOpen: false,\r\n      };\r\n      return item;\r\n    });\r\n    setCollapsedListStates(array);\r\n  }, [lists]);\r\n\r\n  const list = [];\r\n  todos.forEach((todo) => {\r\n    if (!list.includes(todo.list)) {\r\n      list.push(todo.list);\r\n    }\r\n  });\r\n\r\n  const getListId = (listname) => {\r\n    const list = lists.find((item) => {\r\n      return item.name.toLowerCase() === listname.toLowerCase();\r\n    });\r\n    return list.id;\r\n  };\r\n\r\n  const handleCollapse = (listId) => {\r\n    let tmp = [...collapsedListStates];\r\n    let clickedIndex = tmp.findIndex((item) => item.id === listId);\r\n    tmp[clickedIndex].isOpen = !tmp[clickedIndex].isOpen;\r\n    setCollapsedListStates(tmp);\r\n  };\r\n\r\n  const handleExpandAll = (e) => {\r\n    let tmp = [...collapsedListStates];\r\n    tmp.forEach((element) => {\r\n      element.isOpen = true;\r\n    });\r\n    setCollapsedListStates(tmp);\r\n  };\r\n\r\n  const handleCollapseAll = (e) => {\r\n    let tmp = [...collapsedListStates];\r\n    tmp.forEach((element) => {\r\n      element.isOpen = false;\r\n    });\r\n    setCollapsedListStates(tmp);\r\n  };\r\n\r\n  const handleCheckboxInputChange = (e) => {\r\n    setHideCompleted(e.target.checked);\r\n  };\r\n\r\n  const setCollapsed = (listItem) => {\r\n    let collapsibleState = collapsedListStates.find(\r\n      ({ id }) => id === getListId(listItem)\r\n    );\r\n    return collapsibleState.isOpen;\r\n  };\r\n\r\n  const generateLists = list.map((listItem) => {\r\n    if (listItem !== 'deadlines') {\r\n      let filtered = todos.filter(\r\n        (todo) => todo.list === listItem && todo.list !== 'deadlines'\r\n      );\r\n      if (hideCompleted) {\r\n        filtered = filtered.filter((todo) => !todo.isdone);\r\n      }\r\n      return (\r\n        <ul key={getListId(listItem)}>\r\n          <Collapsible\r\n            id={getListId(listItem)}\r\n            header={<h3>{listItem}</h3>}\r\n            onClick={handleCollapse}\r\n            isOpen={setCollapsed(listItem)}\r\n          >\r\n            <TodoList\r\n              todos={filtered}\r\n              todoHandler={todoHandler}\r\n              collapsibleStates={collapsibleStates}\r\n            />\r\n          </Collapsible>\r\n        </ul>\r\n      );\r\n    }\r\n    return '';\r\n  });\r\n\r\n  if (!isLoaded) {\r\n    return <div className='list'>{statusMessage}</div>;\r\n  } else {\r\n    return (\r\n      <>\r\n        <div className='list-toolbar'>\r\n          <button className='btn-alt' onClick={handleExpandAll}>\r\n            Expand all lists\r\n          </button>\r\n          <button className='btn-alt' onClick={handleCollapseAll}>\r\n            Collapse all lists\r\n          </button>\r\n          <div className='hide-completed-toggle'>\r\n            <label className='checbox-wrapper'>\r\n              <i\r\n                className={\r\n                  hideCompleted ? 'fas fa-check-square' : 'fas fa-square'\r\n                }\r\n              ></i>\r\n              <input\r\n                type='checkbox'\r\n                checked={hideCompleted}\r\n                onChange={handleCheckboxInputChange}\r\n              />\r\n              Hide completed\r\n            </label>\r\n          </div>\r\n        </div>\r\n\r\n        <div className='list'>\r\n          <div className='deadlines'>\r\n            <h3>Deadlines</h3>\r\n            <Deadline\r\n              // FIX THIS PADAWAN IT IS DISGUSTING\r\n              deadlines={todos.filter(\r\n                (todo) => todo.list === 'deadline' || todo.list === 'deadlines'\r\n              )}\r\n              todoHandler={todoHandler}\r\n              collapsibleStates={collapsibleStates}\r\n            />\r\n          </div>\r\n          {generateLists}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n};\r\n\r\nexport default ListComponent;\r\n","import React, { useState, useEffect } from 'react';\n\nconst SortButtonLabel = {\n  ISDONE: 'Completed',\n  DATE: 'Date',\n  NAME: 'Name',\n  PRIORITY: 'Priority',\n};\n\nfunction SortButton(props) {\n  const handleClick = (e) => {\n    props.onClick(props.label);\n  };\n\n  return (\n    <button className='btn py-05' onClick={handleClick}>\n      {props.label}\n    </button>\n  );\n}\n\nfunction SortButtonListComponent(props) {\n  const [sortAscending, setSortAscending] = useState(true);\n  const [previouslyClicked, setPreviouslyClicked] = useState(null);\n\n  const tasklist = props.tasklist.slice();\n  const updateTasklist = props.updateTasklist;\n\n  // Sort handling\n  useEffect(() => {\n    tasklist.sort((a, b) => {\n      if (a.list !== b.list) {\n        return a.list.localeCompare(b.list);\n      } else {\n        switch (previouslyClicked) {\n          case SortButtonLabel.DATE:\n            // Nulls are sorted in 'reverse' order, it\n            // seems more logical this way, as now closest\n            // dates are first, not nulls.\n            return sortAscending\n              ? (a.date === null) - (b.date === null) ||\n                  new Date(a.date) - new Date(b.date)\n              : (b.date === null) - (a.date === null) ||\n                  new Date(b.date) - new Date(a.date);\n          case SortButtonLabel.NAME:\n            return sortAscending\n              ? a.name.localeCompare(b.name)\n              : b.name.localeCompare(a.name);\n          case SortButtonLabel.PRIORITY:\n            // Value 0 for priority is also sorted in reverse\n            // order, for similar reasons as date null sorting.\n            // Value 0 represents 'no priority', so shouldn't\n            // be shown before 1, which is the highest priority.\n            return sortAscending\n              ? (a.priority === 0) - (b.priority === 0) ||\n                  a.priority - b.priority\n              : (b.priority === 0) - (a.priority === 0) ||\n                  b.priority - a.priority;\n          case SortButtonLabel.ISDONE:\n            return sortAscending ? b.isdone - a.isdone : a.isdone - b.isdone;\n          default:\n            return 0;\n        }\n      }\n    });\n    updateTasklist(tasklist);\n\n    // Below is necessary to stop eslint from complaining about\n    // a missing dependency for useEffect().\n    // The missing dependency is the tasklist being sorted, but\n    // having it in the dep array causes an infinite loop.\n    // Not having it there seems to work just fine (so far).\n\n    // eslint-disable-next-line\n  }, [sortAscending, previouslyClicked, updateTasklist]);\n\n  const handleClick = (buttonLabel) => {\n    if (buttonLabel === previouslyClicked) {\n      setSortAscending(!sortAscending);\n    } else {\n      setSortAscending(true);\n    }\n\n    setPreviouslyClicked(buttonLabel);\n  };\n\n  return (\n    <div>\n      <ul className='sortbuttonlist'>\n        Sort by:\n        <li>\n          <SortButton label='Date' onClick={handleClick} />\n        </li>\n        <li>\n          <SortButton label='Name' onClick={handleClick} />\n        </li>\n        <li>\n          <SortButton label='Priority' onClick={handleClick} />\n        </li>\n        <li>\n          <SortButton label='Completed' onClick={handleClick} />\n        </li>\n      </ul>\n    </div>\n  );\n}\n\nexport default SortButtonListComponent;\n","import React from 'react';\r\nimport './scss/Main.scss';\r\nimport axios from './config/axiosconfig';\r\n// Import components\r\nimport TodoForm from './components/TodoForm';\r\nimport ListComponent from './components/ListComponent';\r\nimport SortComponent from './components/SortComponent';\r\n\r\nconst todoFormButtonLabel = {\r\n  ADD: 'Add',\r\n  EDIT: 'Edit',\r\n};\r\n\r\nconst DEFAULT_LIST = 'deadlines';\r\n\r\n// Screen size at which it's too small to fit both the form\r\n// and the list side by side.\r\nconst MOBILE_WIDTH_THRESHOLD = 1050;\r\n\r\n// Todo:\r\n// Cleanup\r\n// Rename a bunch of functions and variables for clarity?\r\n// Start extracting components where necessary, again for clarity.\r\n// Confirmation dialog for delete button?\r\n// Add collapse/expand all buttons for lists!\r\n\r\n// NOTE! todoFormState now generates random id for added items for\r\n// item removal to work.\r\n// Refactor this when using database.\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isLoaded_lists: false,\r\n      isLoaded_todos: false,\r\n      isLoaded: false,\r\n      statusMessage: 'Fetching data...',\r\n      todos: [],\r\n      lists: [],\r\n      todoFormState: {\r\n        name: '',\r\n        date: '',\r\n        priority: '',\r\n        list: '',\r\n        descritpion: '',\r\n        isdone: false,\r\n      },\r\n      todoFormSubmitButtonLabel: todoFormButtonLabel.ADD,\r\n      collapsibleStates: [],\r\n      isFormVisibleWhenScreenSmall: false,\r\n    };\r\n  }\r\n\r\n  // One function for all potential resources that need\r\n  // fetching from the api at startup.\r\n  handleInitialFetch = (resource, success) => {\r\n    axios\r\n      .get('/'.concat(`${resource}?apikey=${process.env.REACT_APP_APIKEY}`))\r\n      .then((res) => {\r\n        if (res.hasOwnProperty('data')) {\r\n          success(res);\r\n        } else {\r\n          throw new Error('Data fetching failed.');\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        this.handleFetchError(err, () => {\r\n          const key = 'isLoaded_'.concat(resource);\r\n          this.setState({ [key]: true });\r\n        });\r\n      });\r\n  };\r\n\r\n  // A response will be returned if the backend service\r\n  // is up and running, in which case the db is reachable.\r\n  // 404 here would just mean the db tables are empty, so operation\r\n  // can be continued normally.\r\n  handleFetchError = (err, cb) => {\r\n    if (err.response && err.response.status === 404) {\r\n      cb();\r\n    } else {\r\n      this.setState({ statusMessage: 'ERROR: Could not reach the api' });\r\n    }\r\n  };\r\n\r\n  // Used for fetching resources.\r\n  componentDidMount() {\r\n    const resources = ['lists', 'todos'];\r\n    for (const resource of resources) {\r\n      this.handleInitialFetch(resource, (res) => {\r\n        switch (resource) {\r\n          case 'lists':\r\n            this.setState({ lists: res.data, isLoaded_lists: true });\r\n            break;\r\n          case 'todos':\r\n            const todos = res.data.map((item) => {\r\n              return this.convertTodoContext(item);\r\n            });\r\n            let collapsibleStates = [...this.state.collapsibleStates];\r\n            for (const element of todos) {\r\n              const collapsibleStateObject = { id: element.id, isOpen: false };\r\n              collapsibleStates = collapsibleStates.concat(\r\n                collapsibleStateObject\r\n              );\r\n            }\r\n            this.setState({\r\n              todos: todos,\r\n              collapsibleStates: collapsibleStates,\r\n              isLoaded_todos: true,\r\n            });\r\n            break;\r\n          default:\r\n            console.log('Something went wrong.');\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  // Check that resources are loaded\r\n  componentDidUpdate() {\r\n    // If data has initially been fetched successfully,\r\n    // flip isLoaded to true, so todos can be rendered.\r\n    if (\r\n      this.state.isLoaded_todos &&\r\n      this.state.isLoaded_lists &&\r\n      !this.state.isLoaded\r\n    ) {\r\n      this.setState({ isLoaded: true });\r\n    }\r\n  }\r\n\r\n  // move this to its own file?\r\n  // or maybe refactor so that no conversion needs be made\r\n  // as i had originally planned, that the object would be\r\n  // identical across both front and back\r\n  convertTodoContext = (todo) => {\r\n    const context = todo.hasOwnProperty('date') ? 'frontend' : 'backend';\r\n    if (context === 'frontend') {\r\n      const backendContext = {\r\n        date_deadline: todo.date !== '' ? todo.date : null,\r\n        name: todo.name,\r\n        description: todo.description,\r\n        priority: +todo.priority,\r\n        is_done: todo.isdone,\r\n      };\r\n      if (todo.listid) {\r\n        backendContext.listid = todo.listid;\r\n      }\r\n      // When adding new todo, these are assigned by the backend service,\r\n      // so they won't be there before the added todo has been\r\n      // fetched back from the api.\r\n      // When editing a todo, these keys would've been added by the\r\n      // backend, and need to be sent there.\r\n      if (todo.created) {\r\n        backendContext.date_created = todo.created;\r\n      }\r\n      if (todo.id) {\r\n        backendContext.id = todo.id;\r\n      }\r\n      return backendContext;\r\n    }\r\n    if (context === 'backend') {\r\n      // Backend will always return all fields\r\n      const frontendContext = {\r\n        id: todo.id,\r\n        name: todo.name,\r\n        date: todo.date_deadline,\r\n        priority: todo.priority,\r\n        listid: todo.listid,\r\n        list: this.getListName(todo.listid),\r\n        description: todo.description,\r\n        isdone: todo.is_done,\r\n        created: todo.date_created,\r\n      };\r\n      return frontendContext;\r\n    }\r\n    return todo;\r\n  };\r\n\r\n  // Looks up the ID of a list based on the lists name.\r\n  // Lists are stored in the state, and fetched from the api\r\n  // before first render.\r\n  getListId = async (listname) => {\r\n    let lists = [...this.state.lists];\r\n    if (listname === '') {\r\n      listname = DEFAULT_LIST;\r\n    }\r\n    const list = lists.find((item) => {\r\n      return item.name.toLowerCase() === listname.toLowerCase();\r\n    });\r\n    if (list) {\r\n      return list.id;\r\n    } else {\r\n      // create new list in db, return it's id\r\n      try {\r\n        const result = await axios.post(\r\n          `/lists?apikey=${process.env.REACT_APP_APIKEY}`,\r\n          { name: listname }\r\n        );\r\n        return result.data.content.id;\r\n      } catch (err) {\r\n        // alert(err.response.data.msg);\r\n        console.log(err.response);\r\n      }\r\n    }\r\n    // return list.id;\r\n  };\r\n\r\n  // Todo objects returned from api wont have a list name by default,\r\n  // so its necessary to check which list name belongs to which list id.\r\n  // Looks up the name of a list based on an id.\r\n  // Lists are stored in the state, and fetched from the api\r\n  // before first render.\r\n  getListName = (listid) => {\r\n    let lists = [...this.state.lists];\r\n    const list = lists.find((item) => {\r\n      return item.id === listid;\r\n    });\r\n    return list.name;\r\n  };\r\n\r\n  isLastTodoFromList = (todo) => {\r\n    // Get all todos in the same list as\r\n    // the todo given as an arg to this function.\r\n    let temp = this.state.todos.filter((item) => {\r\n      return item.list === todo.list;\r\n    });\r\n    let todosLeft = temp.length;\r\n\r\n    if (todosLeft === 0) {\r\n      return true;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  handleTodoFormInputChange = (event) => {\r\n    const target = event.target;\r\n    const value = target.value;\r\n    const name = target.name;\r\n\r\n    let todoFormState = { ...this.state.todoFormState };\r\n    todoFormState[name] = value;\r\n    this.setState({\r\n      todoFormState: todoFormState,\r\n    });\r\n  };\r\n\r\n  handleSubmit = async (todo) => {\r\n    let todos = [...this.state.todos];\r\n    let lists = [...this.state.lists];\r\n    let collapsibleStates = [...this.state.collapsibleStates];\r\n\r\n    if (window.innerWidth < MOBILE_WIDTH_THRESHOLD) {\r\n      this.setState({ isFormVisibleWhenScreenSmall: false });\r\n    }\r\n\r\n    try {\r\n      // Get a list id for the todo which is being added/edited\r\n      const listid = await this.getListId(todo.list);\r\n      const todoBackendContext = this.convertTodoContext(todo);\r\n      todoBackendContext.listid = listid;\r\n\r\n      // If editing a todo\r\n      if (this.state.todoFormSubmitButtonLabel === todoFormButtonLabel.EDIT) {\r\n        const indexOfEditedTodo = todos.findIndex(\r\n          (element) => element.id === todo.id\r\n        );\r\n        // Put (update) the todo object in db with new info\r\n        const putTodoResponse = await axios.put(\r\n          `/todos/${todo.id}?apikey=${process.env.REACT_APP_APIKEY}`,\r\n          todoBackendContext\r\n        );\r\n        // console.log(putTodoResponse)\r\n\r\n        // If updated successfully, apply changes\r\n        // to state so the new info gets rendered.\r\n        if (putTodoResponse.status === 200) {\r\n          // workaround for default list not rendering properly\r\n          // for edited todos which have empty task list field.\r\n          if (todo.list === '') {\r\n            todo.list = DEFAULT_LIST;\r\n          }\r\n\r\n          // Check if a new list was added, if yes, then\r\n          // fetch the lists from api again.\r\n          if (\r\n            !lists.includes({\r\n              id: todoBackendContext.listid,\r\n              name: todo.list,\r\n            })\r\n          ) {\r\n            const getListsResult = await axios.get(\r\n              `/lists?apikey=${process.env.REACT_APP_APIKEY}`\r\n            );\r\n            this.setState({ lists: getListsResult.data });\r\n          }\r\n          todos[indexOfEditedTodo] = todo;\r\n          // console.log(todo);\r\n        } else {\r\n          throw new Error('ERROR: Could not update entry in db.');\r\n        }\r\n      } else {\r\n        // If adding a new todo\r\n\r\n        // Post the todo object to the api in the correct context.\r\n        const postResponse = await axios.post(\r\n          `/todos?apikey=${process.env.REACT_APP_APIKEY}`,\r\n          todoBackendContext\r\n        );\r\n        const addedTodoId = postResponse.data.content.id;\r\n\r\n        // Create a collapsible context object for the new todo.\r\n        const collapsibleContext = { id: addedTodoId, isOpen: false };\r\n        collapsibleStates = collapsibleStates.concat(collapsibleContext);\r\n        // console.log(getResult.data);\r\n        // console.log(lists);\r\n\r\n        // Check if a new list was added, if yes, then\r\n        // fetch the lists from api again.\r\n        if (\r\n          !lists.includes({\r\n            id: todoBackendContext.listid,\r\n            name: todo.list,\r\n          })\r\n        ) {\r\n          const getListsResult = await axios.get(\r\n            `/lists?apikey=${process.env.REACT_APP_APIKEY}`\r\n          );\r\n          this.setState({ lists: getListsResult.data });\r\n        }\r\n\r\n        // Finally, fetch the newly added todo and convert it into\r\n        // correct context. If the post request was successful, we could\r\n        // just concat the same object to todos, but this way all the\r\n        // info added/changed by the backend service will always be\r\n        // included in what is stored here in the frontend app.\r\n        const getTodoResponse = await axios.get(\r\n          `/todos/${addedTodoId}?apikey=${process.env.REACT_APP_APIKEY}`\r\n        );\r\n        const tmp = getTodoResponse.data[0];\r\n        const todoFrontendContext = this.convertTodoContext(tmp);\r\n        todos = todos.concat(todoFrontendContext);\r\n        console.log(todoFrontendContext);\r\n      }\r\n    } catch (err) {\r\n      // alert(err.response.data.msg);\r\n      console.log(err);\r\n      console.log(err.response);\r\n    }\r\n\r\n    this.setState({\r\n      todos: todos,\r\n      todoFormState: this.resetTodoFormState(),\r\n      todoFormSubmitButtonLabel: todoFormButtonLabel.ADD,\r\n      collapsibleStates: collapsibleStates,\r\n    });\r\n  };\r\n\r\n  handleCancel = () => {\r\n    if (window.innerWidth < MOBILE_WIDTH_THRESHOLD) {\r\n      this.setState({ isFormVisibleWhenScreenSmall: false });\r\n    }\r\n    this.setState({\r\n      todoFormState: this.resetTodoFormState(),\r\n      todoFormSubmitButtonLabel: todoFormButtonLabel.ADD,\r\n    });\r\n  };\r\n\r\n  resetTodoFormState = () => {\r\n    let todoformstate = {};\r\n    todoformstate.name = '';\r\n    todoformstate.date = '';\r\n    todoformstate.priority = '';\r\n    todoformstate.list = '';\r\n    todoformstate.description = '';\r\n    todoformstate.isdone = false;\r\n    return todoformstate;\r\n  };\r\n\r\n  handleSort = (sortedTodos) => {\r\n    this.setState({ todos: sortedTodos });\r\n  };\r\n\r\n  getTodoObject = (todoId) => {\r\n    const todo = this.state.todos.filter((el) => el.id === todoId);\r\n    console.log(todo);\r\n    return todo[0];\r\n  };\r\n\r\n  todoHandler = {\r\n    collapse: (todoId) => {\r\n      let collapsibleStates = [...this.state.collapsibleStates];\r\n      collapsibleStates.forEach((element) => {\r\n        element.isOpen = todoId === element.id ? !element.isOpen : false;\r\n      });\r\n      this.setState({ collapsibleStates: collapsibleStates });\r\n    },\r\n\r\n    // Filtering happens here where we have access to whole list\r\n    // of todos\r\n    delete: async (todoId) => {\r\n      const todo = this.getTodoObject(todoId);\r\n      try {\r\n        const deleteResponse = await axios.delete(\r\n          `todos/${todoId}?apikey=${process.env.REACT_APP_APIKEY}`\r\n        );\r\n        if (deleteResponse.status === 204) {\r\n          const temp = this.state.todos.filter((el) => {\r\n            // console.log(el);\r\n            return el.id !== todoId;\r\n          });\r\n          this.setState({\r\n            todos: temp,\r\n          });\r\n          // If last item on list delete list (if list is not deadlines i.e. default)\r\n          if (todo.list !== 'deadlines') {\r\n            if (this.isLastTodoFromList(todo)) {\r\n              const listId = await this.getListId(todo.list);\r\n              const deleteListRes = await axios.delete(\r\n                `lists/${listId}?apikey=${process.env.REACT_APP_APIKEY}`\r\n              );\r\n              if (deleteListRes.status === 204) {\r\n                const temp = this.state.lists.filter((el) => {\r\n                  return el.id !== listId;\r\n                });\r\n                this.setState({\r\n                  lists: temp,\r\n                });\r\n              } else {\r\n                throw new Error(\r\n                  `ERROR: Could not delete list with id: ${listId} from db.`\r\n                );\r\n              }\r\n            }\r\n          }\r\n        } else {\r\n          throw new Error(\r\n            `ERROR: Could not delete todo with id: ${todoId} from db.`\r\n          );\r\n        }\r\n      } catch (err) {\r\n        console.log(err);\r\n        // console.log(err.response);\r\n      }\r\n    },\r\n\r\n    // Filtering happens here where we have access to whole list\r\n    // of todos\r\n    complete: async (todoId) => {\r\n      // Check if todo is done or not before updating is_done value\r\n      const todo = this.getTodoObject(todoId);\r\n      let todoBackendContext = {};\r\n      todo.isdone\r\n        ? (todoBackendContext.is_done = false)\r\n        : (todoBackendContext.is_done = true);\r\n      try {\r\n        const updateResponse = await axios.put(\r\n          `todos/${todoId}?apikey=${process.env.REACT_APP_APIKEY}`,\r\n          todoBackendContext\r\n        );\r\n        if (updateResponse.status === 200) {\r\n          const temp = [...this.state.todos];\r\n          let idx = temp.findIndex((x) => x.id === todoId);\r\n          temp[idx] = {\r\n            ...temp[idx],\r\n            isdone: !temp[idx].isdone,\r\n          };\r\n          this.setState({\r\n            todos: temp,\r\n          });\r\n        } else {\r\n          throw new Error(\r\n            `Error: Could not mark todo done with id: ${todoId} in db.`\r\n          );\r\n        }\r\n      } catch (err) {\r\n        console.log(err);\r\n        // console.log(err.response);\r\n      }\r\n    },\r\n\r\n    edit: (todoToEdit) => {\r\n      if (window.innerWidth < MOBILE_WIDTH_THRESHOLD) {\r\n        this.setState({ isFormVisibleWhenScreenSmall: true });\r\n      }\r\n      this.setState({\r\n        todoFormState: todoToEdit,\r\n        todoFormSubmitButtonLabel: todoFormButtonLabel.EDIT,\r\n      });\r\n    },\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className='container'>\r\n        <div className='app'>\r\n          <button\r\n            className={\r\n              this.state.isFormVisibleWhenScreenSmall\r\n                ? 'floating-action-button fab-hidden'\r\n                : 'floating-action-button fab-visible'\r\n            }\r\n            onClick={() => {\r\n              this.setState({ isFormVisibleWhenScreenSmall: true });\r\n            }}\r\n          >\r\n            <i className='fas fa-plus' />\r\n          </button>\r\n          <div\r\n            className={\r\n              this.state.isFormVisibleWhenScreenSmall\r\n                ? 'form form-visible'\r\n                : 'form form-hidden'\r\n            }\r\n          >\r\n            <TodoForm\r\n              submitButtonLabel={this.state.todoFormSubmitButtonLabel}\r\n              todoFormState={this.state.todoFormState}\r\n              onInputChange={this.handleTodoFormInputChange}\r\n              onFormSubmit={this.handleSubmit}\r\n              onFormCancel={this.handleCancel}\r\n            />\r\n          </div>\r\n          <div\r\n            className={\r\n              this.state.isFormVisibleWhenScreenSmall\r\n                ? 'todo-list list-hidden'\r\n                : 'todo-list list-visible'\r\n            }\r\n          >\r\n            <SortComponent\r\n              tasklist={this.state.todos}\r\n              updateTasklist={this.handleSort}\r\n            />\r\n            <ListComponent\r\n              todos={this.state.todos}\r\n              lists={this.state.lists}\r\n              todoHandler={this.todoHandler}\r\n              collapsibleStates={this.state.collapsibleStates}\r\n              isLoaded={this.state.isLoaded}\r\n              statusMessage={this.state.statusMessage}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n// import { Provider } from \"react-redux\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}